<ul class="breadcrumb">
  <li><a href="#!meocloud-cli">MEO Cloud CLI</a> <span class="divider">/</span></li>
  <li>Protocols</li>
</ul>

Protocols
=========

UI Protocol
-----------

### Thrift specification

<pre class="prettyprint">
enum NotificationLevel {
  INFO
  WARNING
  ERROR
}

enum State {
  INITIALIZING
  AUTHORIZING
  WAITING
  SYNCING
  READY
  PAUSED
  ERROR
  SELECTIVE_SYNC
  RESTARTING
  OFFLINE
}

struct UserNotification {
  1: i32 code,
  2: i32 type,
  3: NotificationLevel level = NotificationLevel.INFO,
  4: list<string> parameters,
}

struct SystemNotification {
  1: i32 code,
  2: list<string> parameters,
}

struct SyncStatus {
  1: i32 uploadRate,
  2: i32 downloadRate,
  3: i32 pendingUploads,
  4: i32 pendingDownloads,
  5: i32 uploadETASecs,
  6: i32 downloadETASecs,
  7: i32 pendingIndexes,
}

struct Status {
  1: State state,
  2: i32 statusCode,
  3: i64 usedQuota,
  4: i64 totalQuota,
}

struct NetworkSettings {
  1: string proxyAddress,
  2: string proxyType,
  3: i32 proxyPort,
  4: string proxyUser,
  5: string proxyPassword,
  6: i32 uploadBandwidth,
  7: i32 downloadBandwidth,
}

struct DesktopSettings {
  1: bool autostart,
  2: bool notifications,
  3: bool blackIcons
}

struct UserSettings {
  1: NetworkSettings network,
  2: DesktopSettings desktop,
  3: string rootFolder
}

struct Account {
  1: string clientID,
  2: string authKey,
  3: string email,
  4: string name,
  5: string deviceName,
}

service Core {
  Status currentStatus();
  SyncStatus currentSyncStatus();
  list<string> recentlyChangedFilePaths();
  UserSettings migratedSettings();
  void pause();
  void unpause();
  void shutdown();
  string authorizeWithDeviceName( 1: string deviceName );
  void startSync( 1: string rootFolder );
  void unlink( 1: Account account);
  void notify( 1: SystemNotification note );
  void networkSettingsChanged( 1: NetworkSettings settings );
  void requestRemoteDirectoryListing( 1: string path );
  list<string> ignoredDirectories();
  void setIgnoredDirectories( 1: list<string> paths );
  string webLoginURL();
  bool ping();
  string version();
}

service UI {
  NetworkSettings networkSettings();
  void beginAuthorization();
  void authorized( 1: Account account );
  void endAuthorization();
  Account account();
  void notifySystem( 1: SystemNotification note );
  void notifyUser( 1: UserNotification note );
  void remoteDirectoryListing( 1: i32 statusCode, 2: string path, 3: list<string> listing );
}
</pre>

### Status and Notification Codes

The core will send a `UserNotification` or `SystemNotification` to the GUI whenever certain events occur. For example, an event will be sent if the core cannot update a file on the file system due to insufficient permissions:

<pre class="prettyprint">
UserNotification {
  code:  CLDUserNotificationCannotSyncDueToPermissions,
  type:  CLDUserNotificationTypeMaskPersistent|CLDUserNotificationTypeMaskMenuBar,
  level: NotificationLevel.INFO,
  parameters: <path>
}
</pre>

#### System Notification Codes

System notifications (`SystemNotification`) are sent whenever the core and GUI want to communicate with each other.

<pre class="prettyprint">
typedef enum {
  CLDSystemStatusChanged = 0,
  CLDSystemNetworkSettingsChanged,
  CLDSystemSharedFolderAdded,
  CLDSystemSharedFolderUnshared
} CLDSystemNotificationCode;
</pre>

**Messages from the Core to the GUI**

- `CLDSystemStatusChanged` – core status has changed. The GUI should query the new status using the `currentStatus()` call;
- `CLDSystemSharedFolderAdded` – a shared folder was created. The first parameter contains the relative shared folder path. The GUI must add a "Shared Folder" icon to this folder;
- `CLDSystemSharedFolderUnshared` – a shared folder was unshared. The first parameter contains the relative shared folder path.

**Messages from the GUI to the Core**
- `CLDSystemNetworkSettingsChanged` – the network settings have changed.

#### User Notification Codes

User notifications (`UserNotification`) are sent from the core to the GUI. These notifications should be displayed to the user, using the strings in [User Notification Messages](#user-notifications-messages).

<pre class="prettyprint">
typedef enum {
  CLDUserNotificationFileAdded = 200,
  CLDUserNotificationFileDeleted,
  CLDUserNotificationFileUpdated,
  CLDUserNotificationFilesAdded,
  CLDUserNotificationFilesDeleted,
  CLDUserNotificationFilesUpdated,
  CLDUserNotificationFilesChanged,

  CLDUserNotificationSharedFolderAdded = 250,
  CLDUserNotificationSharedFolderDeleted,
  CLDUserNotificationSharedFolderUnshared,
    
  CLDUserNotificationQuotaExceeded = 500,
  CLDUserNotificationCannotSyncDueToSpace,
  CLDUserNotificationCannotSyncDueToPermissions
} CLDUserNotificationCode;
</pre>

####	User Notification types
Notification types specify where and how a `UserNotification` should be displayed to the user. `CLDUserNotificationTypeMaskGrowl`, should be displayed as a pop-up notification.

<pre class="prettyprint">
typedef enum {
  CLDUserNotificationTypeReset            = 0,
  CLDUserNotificationTypeMaskPersistent   = 1 << 0,
  CLDUserNotificationTypeMaskMenuBar      = 1 << 1,
  CLDUserNotificationTypeMaskAlertWindow  = 1 << 2,
  CLDUserNotificationTypeMaskGrowl        = 1 << 3,
} CLDUserNotificationType;
</pre>

If a notification type has the `CLDUserNotificationTypeMaskPersistent` bit set, the notification must be shown until a notification with the same code is received with the mask `CLDUserNotificationTypeReset`.

####	Status codes
<pre class="prettyprint">
typedef struct {
  unsigned int syncCode:8;
  unsigned int :16;
  unsigned int errorCode:8;
} CLDStatusCode;

typedef enum {
  CLDStatusNoError,
  CLDStatusErrorAuthTimeout,
  CLDStatusErrorRootFolderGone,
  CLDStatusErrorUnknown,
  CLDStatusErrorThreadCrash,
} CLDStatusErrorCore;
</pre>

####	Status mask

<pre class="prettyprint">
typedef enum {
  CLDSyncStatusMaskIndexing       = 1 << 0,
  CLDSyncStatusMaskUploading      = 1 << 1,
  CLDSyncStatusMaskDownloading    = 1 << 2,
  CLDSyncStatusMaskListingChanges = 1 << 3,
} CLDSyncStatusMask;
</pre>

###	User Notifications Messages

<pre class="prettyprint">
# File creations and deletions
"200_title" = "File Added"
"200_description" = "File \"%S\" was added to your APP_NAME folder"
"201_title" = "File Removed"
"201_description" = "File \"%S\" was removed from your APP_NAME folder"
"202_title" = "File Updated"
"202_description" = "File \"%S\" was updated in your APP_NAME folder"
"203_title" = "Files Added"
"203_description" = "%S files were added to your APP_NAME folder"
"204_title" = "Files Removed"
"204_description" = "%S files were removed from your APP_NAME folder"
"205_title" = "Files Updated"
"205_description" = "%S files were updated in your APP_NAME folder"
"206_title" = "Files Synchronized"
"206_description" = "%S files were synchronized in your APP_NAME folder"
"207_title" = "Connecting to APP_NAME..."
"207_description" = "Please check your Internet connection and proxy settings."

# Shared folders
"250_title" = "Shared Folder Created"
"250_description" = "Shared folder \"%S\" was created in your APP_NAME folder"
"251_title" = "Shared Folder Deleted"
"251_description" = "Shared folder \"%S\" was deleted from your APP_NAME folder"
"252_title" = "Shared Folder Unshared"
"252_description" = "Stopped sharing folder \"%S\""

# Errors
"500_title" = "Quota Exceeded"
"500_description" = "You have exceeded your APP_NAME quota. Please free more space to continue uploading."
"501_title" = "Could not synchronize \"%S\""
"501_description" = "Could not synchronize \"%S\". Please verify that you have sufficient permissions and that the file is not in use."
"502_title" = "Insufficient disk space"
"502_description" = "Could not update \"%S\". Please ensure that you have sufficient free disk space."
"503_title" = "File \"%S\" is in use"
"503_description" = "File \"%S\" is in use. Please ensure that the file is not open by another application."
</pre>

File Manager Extension Protocol
-------------------------------

**This protocol is currently being finalized and may change.**

### Thrift specification

<pre class="prettyprint">
enum NotificationType {
  FILE_STATUS
}

enum FileState {
  READY
  SYNCING
  IGNORED
  ERROR
}

enum MessageType {
  SUBSCRIBE_PATH
  SHARE
  OPEN
  FILE_STATUS
}

enum SubscribeType {
  SUBSCRIBE
  UNSUBSCRIBE
}

enum ShareType {
  LINK
  FOLDER
}

enum OpenType {
  BROWSER
}

enum FileStatusType {
  REQUEST
  RESPONSE
  MULTI_REQUEST
  MULTI_RESPONSE
}

struct SubscribeMessage {
  1: SubscribeType type,
  2: string path,
}

struct ShareMessage {
  1: ShareType type,
  2: string path,
}

struct OpenMessage {
  1: OpenType type,
  2: string path,
}

struct FileStatus {
  1: string path,
  2: FileState state,
}

struct FileStatusMessage {
  1: FileStatusType type,
  2: optional FileStatus status,
  3: optional list<FileStatus> statuses,
}

struct Message {
  1: MessageType type,
  2: optional SubscribeMessage subscribe,
  3: optional ShareMessage share,
  4: optional OpenMessage open,
  5: optional FileStatusMessage fileStatus,
}
</pre>
