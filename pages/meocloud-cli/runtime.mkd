<ul class="breadcrumb">
  <li><a href="#!meocloud-cli">MEO Cloud CLI</a> <span class="divider">/</span></li>
  <li>Runtime Interactions</li>
</ul>

Runtime Interactions
====================

The GUI starts and stops the sync core. Moreover, the GUI is expected to provide a watchdog-like functionality for the core. Should the core be terminated unexpectedly (crash, process kill), the GUI must restart the core.

If, after multiple restart attempts the core keeps terminating, the GUI should stop the watchdog mechanism and notify the user that the application is unable to start properly.

The core provides a **ping** mechanism that can be used to determine if it is alive.  Currently, a five second interval between pings is recommended. Additionally, the GUI should check the return code of the system call used to start the core.

Startup
-------

The GUI should ensure that no other core instances are running. This can be achieved by acquiring a single core instance lock, as described below.

The core process itself will look for the following environment variables during startup:

-	`CLD_CORE_SOCKET_PATH` – contains the name of the Unix socket or Windows named pipe where the core should provide its thrift service
-	`CLD_UI_SOCKET_PATH` – contains the name of the Unix socket or Windows named pipe where the GUI should provide its thrift service

The GUI must set these two environment variables before starting the core process.

### Startup on Linux and Mac OS X
The GUI must try to obtain an exclusive lock on the `~/.meocloud/daemon.lock` file, using `lockf(3)`, before starting the core. Also, it must ensure that only the user that started the application has permissions to connect to the created Unix sockets.

If the lock cannot be obtained, the GUI should read the core’s PID from the `~/.meocloud/daemon.pid` file and terminate it before attempting to acquire the lock again.


#### Lauching the core process on Linux

The following Python code snippet exemplifies how to launch the core process on Linux. We recommend that `ui_socket`, `core_socket` and `shell_socket` are placed in the `~/.meocloud` directory.

<pre class="prettyprint">
core_env = os.environ.copy()
core_env['CLD_CORE_SOCKET_PATH'] = <core_socket>
core_env['CLD_UI_SOCKET_PATH'] = <ui_socket>
core_env['CLD_SHELL_SOCKET_PATH'] = <shell_socket>
process = Popen(['/path/to/meocloudd'], env=core_env)
</pre>

#### Launching the core process on Mac OS X

The following Objective-C code snippet exemplifies how to launch the core process on OS X. We recommend that `ui_socket`, `core_socket` and `shell_socket` are placed in the per-user temporary area.

<pre class="prettyprint">
  NSTask *task = [[NSTask alloc] init];    
  NSMutableDictionary *environment = [[[NSProcessInfo processInfo] environment] mutableCopy];

  [environment addEntriesFromDictionary:@{
    @"CLD_UI_SOCKET_PATH": @"</path/to/ui_socket>",
    @"CLD_CORE_SOCKET_PATH": @"</path/to/core_socket>",
    @"CLD_SHELL_SOCKET_PATH": @"</path/to/shell_socket>",
  }];
    
  [task setEnvironment:environment];
  [task setLaunchPath:@"</path/to/meocloudd>"]];
  [task launch];
</pre>

### Startup on Windows
The GUI must create the `MEOCloud_044230DF-3CD1-4A3D-8A63-ADDF0255400F` mutex (see: [CreateMutex](http://msdn.microsoft.com/en-us/library/windows/desktop/ms682411.aspx)) before starting the core. If the mutex cannot be created, the GUI should read the core’s PID from the `%LOCALAPPDATA%\daemon.pid` file and terminate it before attempting to create the mutex again.

Care must be taken when generating Windows named pipe names. Names should be randomly generated using entropy from a source approved for cryptographic purposes. Converting a 16-byte output from the [CryptGenRandom](http://msdn.microsoft.com/en-us/library/windows/desktop/aa379942.aspx) function to a hexadecimal string should be sufficient.

#### Lauching the core process on Windows

The following C code snippet exemplifies how to launch the core process on Windows. Please ensure that the Windows Named Pipe names are created according to the rules above.

<pre class="prettyprint">
STARTUPINFO startupInfo; 
PROCESS_INFORMATION processInfo; 
DWORD creationflags = CREATE_UNICODE_ENVIRONMENT | CREATE_NO_WINDOW; 
LPTSTR processcmd  = _tcsdup(TEXT("<Path\To\meocloudd.exe>")

SetEnvironmentVariable(TEXT("CLD_CORE_PIPE"), TEXT("\\.\pipe\<core_pipe>"));
SetEnvironmentVariable(TEXT("CLD_UI_PIPE"), TEXT("\\.\pipe\<ui_pipe>"));
SetEnvironmentVariable(TEXT("CLD_SHELL_PIPE"), TEXT("\\.\pipe\<shell_pipe>"));

ZeroMemory(&SsartupInfo, sizeof(startupInfo));
startupInfo.cb = sizeof(startupInfo);
BOOL result = CreateProcess(NULL, processcmd, NULL, NULL, FALSE, creationflags, NULL, NULL, &startupInfo, &processInfo);
</pre>

### Examples

Some common interaction scenarios between the GUI and Core are detailed. It is assumed that the GUI has already started the core with the required environment variables set.

#### Registration

The GUI stores the user credentials for the MEO Cloud service. These credentials must be stored using a secure mechanism, preferably provided by the desktop environment itself, such as the [Gnome Keyring](https://wiki.gnome.org/action/show/Projects/GnomeKeyring), [MacOS Keychain](https://developer.apple.com/library/mac/documentation/security/Reference/keychainservices/Reference/reference.html) or the [Windows Data Protection API](http://msdn.microsoft.com/en-us/library/ms995355.aspx).

Note that the Core starts its service in ```CLD_CORE_SOCKET_PATH``` and connects to the GUI service in ```CLD_UI_SOCKET_PATH```. 
![Registration](registration.png)


#### Selective Sync
![Selective Sync](selective_sync.png)

#### Pausing
![Pausing](pausing.png)

